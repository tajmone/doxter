= Doxter: Docs-Generator from PB Sources.
Tristano Ajmone, <tajmone@gmail.com>
v0.1.2-alpha, September 25, 2018: Public Alpha
:License: MIT License
:PureBASIC: 5.62
:toclevels: 3

// tag::description[]
=============================================================================
image::doxter_logo.svg[Doxter Logo,align="center"]

Doxter is a tool to generate AsciiDoc documentation from PureBasic source
files, by using a special notations in comments delimiters to markup tagged
regions of text and code that will be exported to an AsciiDoc source document
where the various regions will be sorted according to their tag's weight.
Released under <<License,MIT License>>.

https://github.com/tajmone/doxter
=============================================================================
// end::description[]

// tag::intro[]

== About Doxter

Doxter was conceived as a practical solution to simplify management of source code
documentation. Specifically, it's birth and growth are tied to the
https://github.com/tajmone/PBCodeArcProto[development of prototype tools^] for
the https://github.com/SicroAtGit/PureBasic-CodeArchiv-Rebirth[PureBasic-CodeArchiv-Rebirth^]
project, which has challenged me in keeping the documentation of multiple
modules always up to date with their current code.

Working on separate documentation and source code files is both tiring and a
cause of redundancy -- you'll need to include some documentation in the source
file comments, and you also need to include some code excerpts in the documentation.
Why duplicate the effort when you can keep it all in one place?

Code generators are not a new idea (and surely, not my original idea either);
there are plenty of code generator tools and frameworks out there, but most
of them are not language agnostic, don't integrate well with PureBasic, or
require a complex setup envolving lot's of dependencies.

Doxter was designed to work with PureBasic, leveraging the power of AsciiDoc
and with simplicity in mind.
// end::intro[]

// tag::who_needs[]

=== Who Needs Doxter?

Any PureBasic or SpiderBasic programmer who knows AsciiDoc and wants to include
documentation of his/her code directly in the source files can benefit from
Doxter by automating the task of producing always up-to-date documentation
in various formats (HTML5, man pages, PDF, and any other format supported by
AsciDoc conversion backends).
// end::who_needs[]

// tag::acknowledgements[]

=== Acknowledgements

Although quite different in design, Doxter was inspired by Lou Acresti's
http://lou.wtf/cod/[Cod^], an unassuming doc format (_Documentus modestus_)
-- the simplicity of Cod sparkled the idea that I could implement something
similar, but exploiting AsciiDoc tagged regions instead.

My gratitude to http://lou.wtf/[Lou Acresti^] (aka https://github.com/namuol[@namuol^])
for having created such an inspiring tool like Cod.
// end::acknowledgements[]

// tag::Features[]
== Features

Doxter is a command line tool that parses a PureBasic (or SpiderBasic) source
file and extracts from it tag-delimited regions of code, these regions are
then processed according to some very simple rules in order to produce a well
formed AsciiDoc source document which can then be converted to HTML via
Asciidoctor (Ruby).

=== Cross Documents Selective Inclusions

Every tagged region in the source file becomes an AsciiDoc tagged region in
the output document. This is a very practical feature for it allows other
AsciiDoc documents to selectively include parts of a source file's documentation
using tag filtering.
For example, when documenting an application that relies on imported Modules,
the main document can selectively include regions from the Doxter-generated
modules' documentation, thus allowing to maintain both independent documentation
for every Module's API, as well as having a main document that extrapolates
parts from the modules' docs in a self-updating fashion.

=== _Ordo ab Chao_: Structured Docs from Scattered Comments

Each tagged region in the PB source can be assigned a weight, so that in the
final document the regions will be reordered in a specific way, forming a well
structured document that presents contents in the right order.
This feature allows to keep each paragraph near the code lines that it
discusses, making the source code more readable and freeing the documentation
from the constraints imposed by the order in which the code is organized.

Keep your comments next to the code they belong to, allowing the source file
to follow its natural course and provide meaningful snippets of in-code
documentation, and use weighed tag regions to ensure that these out-of-order
fragments will be collated in a meaningful progressive order in the output
document.

=== Mix Text and Source Code in Your Documentation

Regions can be made up of AsciiDoc comments and source code, allowing to include
fragments of the original source code in the final documentation, along with
AsciiDoc text.

AsciiDoc comments are comment lines with special comments delimiters which
will be treated as normal comments by PureBasic, but Doxter will strip them of
the comment delimiter so that they will become AsciiDoc lines in the output
document.

Any source code (i.e. non-AsciiDoc comments) inside a tagged region will be
rendered in the final document inside an AsciiDoc source block, with PureBasic
set as its language.
// end::Features[]

// tag::CLI_Usage[]
== Command Line Usage

Doxter is a binary console application (a compiled executable).
There is no installation, just place the binary file (`Doxter.exe` on Windows)
in your working folder, or make it availabe system-wide by adding it to the
system `PATH` environment variable.
// end::CLI_Usage[]

// tag::CLI_Usage[]
=== Command Line Options

To invoke Doxter via command prompt/shell:

--------------------
doxter <sourcefile>
--------------------

â€¦ where `<sourcefile>` is a PureBasic or SpiderBasic source file.
// end::CLI_Usage[]

// tag::Validate_File_Extension[]
=== Input File Validation

Doxter checks that the passed `<sourcefile>` parameter has a valid extension:

* `.pb`  -- PureBasic source file.
* `.pbi` -- PureBasic include file.
* `.pbf` -- PureBasic form file.
* `.sb`  -- SpiderBasic source file.

If the file extension doesn't match, Doxter will report an error and abort
with Status Error 1.
// end::Validate_File_Extension[]

// tag::File_Checks[]
Doxter will also check that the file exists, it's not a directory, and it's
not 0 Kb in size; and abort with Status Error if any of these are met.
// end::File_Checks[]

// tag::Output_File[]

Depending on whether the source file contains or not an <<AsciiDoc Header>>,
the output file will be named either `<sourcefile>.asciidoc` or
`<sourcefile>.adoc`, respectively.
At parsing completion, Doxter will inform the user wther it found a Header
or not, and print the output filename to the console.

This differentiation in the extension used in the output file is due to
the conventions and needs of the PureBasic CodeArchiv project, where files
with `.asciidoc` extension are considered stand-alone documents, which are
subject to script-automated conversion to HTML; whereas files with `.adoc`
extension are considered snippets file which are imported by other docs.
Beside the different file extensions, both type of output files are formated
as standard AsciiDoc documents (with Asciidoctor Ruby in mind).

This is inline with the AsciiDoc standard which demands the presence of a
document Header in a source file for it to be buildable as a standalone
doc; and with the common practice of splitting large documents in smaller
files, which are then imported into the main document and therefore don't
need a Header of their own.
// end::Output_File[]

// tag::Parser_Live_Preview[]

=== Parsing Live Preview During Execution

During execution, Doxter will output to the console a preview of the parsed
lines that belong to tagged regions, showing their ADoc processed version,
together with extra lines added by the parser (eg. source code delimiters).
This feature is very useful to visually trace the source of problems when
the ouput results are not as intendend, as the log shows in a human friendly
format the various steps of Doxter's parsers.

Here's an example of how the console output looks like:

----------------------------------------------------------
|0005|   28|// tag::my_example[]
|0006|   28|For example, the following code from `test.pb`:
|    |   28|
|    |   28|[source,purebasic]
|    |   28|--------------------------------------------------------------------------------
|0007|   28|For i=1 To 5
|0008|   28|  Debug i
|0009|   28|Next
----------------------------------------------------------

The first column indicated the line number in the original source that is
being shown; the absence of line number indicated that what you are seeing
on the right hand side is a line generated by Doxter, and added to the output
document for formatting purposes (in the above example, the opening of a
PureBasic source code block in AsciiDoc markup after line 6).

The second column indicates the weight of the current tagged region being
processed (except for Header lines, which show the text `head` instead). In
the above example the region being shown has a weight of 28.
The weight colum is very useful when looking at the logged output for it
allows to easily spot where regions start and end, as each region should
have a different weight (although not mandatory).

Finally, the third and last columns show the transformed parsed line, i.e.
how the line will be stored in the final AsciiDoc document.
At line `0005` of the above example we can see the AsciiDoc region tag
ce code block in AsciiDoc  by Doxter after parsing `;>my_example(28)` in
the original source file, at the same line number.
// end::Parser_Live_Preview[]

// tag::Documenting_Source[]
== Documenting Your Source Files

Now comes the juicy part, how to incorporate documentation into you source
files. The good news is that the system employed by Doxter is very easy to
learn and simple to use.

// end::Documenting_Source[]

// tag::Comments_Marks[]
=== Doxter Markers Primer

The way Doxter decides which parts of your sorce code to treat as documentation
is by means of PureBasic's comment delimiter (`;`) immediately followed by
a character which, combined with the delimiter, comprise one of Doxter's
markers:

.Doxter's Base Markers
[cols="7m,23d,70d",separator=Â¦]
|============================================================================
Â¦ ;= Â¦ ADoc Header  Â¦ Marks beginning of doc Header. (first line only)
Â¦ ;> Â¦ Region Begin Â¦ Marks beginning of a tagged region.
Â¦ ;| Â¦ ADoc Comment Â¦ Treat line as AsciiDoc text.
Â¦ ;~ Â¦ Skip Comment Â¦ The whole line will be ignored and skipped.
Â¦ ;< Â¦ Region End   Â¦ Marks end of a tagged region.
|============================================================================

The *Tagged Region* marker can also include PureBasic's foldable comments
delimiters:

.Region Markers Variants
[cols="7m,98d"]
|============================
| ;{> | Foldable Region Begin
| ;}< | Foldable Region End
|============================

The *Tagged Region End* marker has an alternative syntax to tell Doxter no to
add an empty line after closing the region:

.Region Markers Modifiers
[cols="2*7m,20d,66d"]
|============================================================================
| ;<< | ;}<< | Unspaced Region End | Don't add empty line after closing tag.
|============================================================================

This is useful when splitting a paragraph across multiple regions, in order to
keep its text lines next to the code they belong to. Without the `<` modifier,
Doxter's default behavior would be to add an empty line after the closing
region tag, which would split the text in multiple paragraphs in the final
document.
// end::Comments_Marks[]

// tag::Comments_Marks_Considerations[]
That's about all you'll have to learn: memorize those five base symbols, their
variannts and modifiers, and learn how to use them correctly and wisely.

Doxter is a "`dumb`" tool -- it doesn't try to interpret or validate what
comes after these markers, it just uses them to delimit and manipulate lines
from your source file according to some simple predefined rules.
It's your responsibility to ensure that the contents of the tagged regions
are AsciiDoc compliant.

But as you shall see, these five simple markers empower you with great freedom
to document your source code. Thanks to some simple rules devised on common
sense expectations of how text and source code should blend in documentation,
Doxter will parse smartly your source files, with little effort on your side.
// end::Comments_Marks_Considerations[]

// tag::The_Parser[]
=== Doxter's Parser

Understanding how Doxter's parser works will help you grasp a clearer picture
of how source files are processed, and gain insight into the proper use of
its markers.
// end::The_Parser[]

// tag::two_steps_parsing[]
Doxter uses a two-steps parsing approach when processing documents:

1. *Header Parser* -- Scans the first lines of the source file looking for
   an AsciiDoc Header. Whether or not it found an Header, once finished
   its job the Header Parser relinquishes control over to the Regions Parser.
2. *Regions Parser* -- Scans the reaminder of the source file looking for
   tagged regions to extract.

These are two different parsers altogether, and Doxter always runs the fed
source file against both of them, in the exact order specified above.
// end::two_steps_parsing[]

// tag::The_Parser_continue[]
Each of these parsers obeys its own rules, and the way they interpret the
comment markers (or ignore them) is slightly different.
Here follow the simple rules by which each parser abides.
// end::The_Parser_continue[]

// tag::Header_Parser_Rules[]

==== Header Parser Rules

The *Header Parser* has one single task, detect if the source contains an
AsciiDoc Header and, if there is one, extract it and store it in memory.

* Check if the very first line of the source file starts with `;=` (no
  leading space allowed):
** *No*? Reset file pointer position to beginning of file and relinquish
   control to the Regions Parser. (Quit Parsing)
** *Yes*? Then an AsciiDoc Header was found; strip away the `;` and store the
   line in the Header's data storage, then:
*** (_loop entrypoint_) Store current file position pointer and parse the
    next line:
**** If an ADoc Comment line (`;|`) is found, strip it of the marker and add
     it to Header's data storage, then carry on with parsing loop.
**** If a Skip Comment line (`;~`) is found, ignore it and carry on with
     parsing loop.
**** If the parsed line is none of the above, restore previous file position
     from stored pointer and relinquish control to the Regions Parser.
     (Exit Loop, Quit Parsing)
// end::Header_Parser_Rules[]

// tag::Regions_Parser_Rules1[]

==== Regions Parser Rules

The task of the *Regions Parser* is to extract and process all lines that
are enclosed between Region Start and Region End tags, and store them in
memory.
// end::Regions_Parser_Rules1[]

// tag::Regions_Parser_Modalities[]
The *Regions Parser* alternates between two mutually exclusive modalities:
_Seeking_, and _InsideRegion_.

When in _Seeking_ modality, the parser will scan every source line until it
finds a line whose first non-whitespace characters are a Region Begin marker
(`;>` or `;{>`), and it will ignore anything else. Once it finds the Region
Begin marker the parser switches to the _InsideRegion_ modality.

When in _InsideRegion_ modality, the parser behavior changes, as every line
which has not a Skip Comment marker (`;~`) will be processed and become part
of the output document, until it find a Region End marker (`;<` and variants),
in which case it reverts to _Seeking_ modality, and so on, until the end of
file is reached.

Furthermore, in _InsideRegion_ modality the parser can be enter and exit the
_InsideCode_ state. This is used to track inclusion of source code lines in
the region, as opposed to ADoc comment lines, for in the final document
source code must be enclosed in an AsciiDoc source block, using source
delimiters and setting the syntax to PureBasic. This will ensure that code
is shown as a verbatim block and enable syntax highlighting (if supported).
// end::Regions_Parser_Modalities[]

// tag::Regions_Parser_Rules2[]

* (*Seeking Modality*) this is the modality the parser starts off in:
** (_loop entrypoint_) Parse line and check if its first non-white space
   characters are a Region Begin Tag (`;>`):
*** *No*? Ignore line and carry on with parsing parsing loop in Seeking mode.
*** *Yes*?
**** Process line and extract tag name and weight (if present)
**** Create new data storage for this region and asign it its weight
**** Add AsciiDoc line to stored region data with tagged region (e.g.
     `// tag::tagId[]` where `tagId` will be either the extracted tag or an
     autogenerated default fallback tag)
**** Enter _InsideRegion_ modality (Switch Loop).
* (*InsideRegion Modality*):
** (_loop entrypoint_) Parse line and check if its first non-white space
   characters are one of Doxter markers or not:
*** *No*? Then the user wants to include source code lines in the region:
**** Set parser's state to _InsideCode_.
**** Add to current region's stored data a blank line followed by AsciiDoc
     markup to open a source block (`[source,purebasic]`) followed by a line
     with source block delimiter (`---`, 80 chars long).
**** Add parsed line to current region's data, as is.
**** Carry on parsing loop in InsideRegion modality.
*** *Yes*? Depending on the found marker:
**** It's an ADoc Comment marker (`;|`):
***** If parser is in _InsideCode_ state, add to current region's stored data
      an AsciiDoc line containing a source delimiter to end source code
      block, followed by a blank line. Carry on parsing loop.
***** Strip marker away (together with following space character, if present)
      and add line to current region's data storage in memory.
***** Carry on parsing loop in InsideRegion modality.
**** It's a Skip Comment marker (`;~`):
***** Ignore line and carry on parsing loop in InsideRegion modality.
**** It's a Region End marker (`;<`):
***** If parser is in _InsideCode_ state, add to current region's stored data
      an AsciiDoc line containing a source delimiter to end source code
      block, followed by a blank line. Carry on parsing loop.
***** Add AsciiDoc line to stored region data to end tagged region (e.g.
     `// end::tagId[]` where `tagId` will be tag assigned to the current
      current region).
***** Check if the Region End marker contais the `<` modifier (`;<<`);
      if not, add a blank line to current region, otherwise not.
***** Revert to _Seeking_ modality (Switch Loop).
// end::Regions_Parser_Rules2[]

// tag::The_Parser_Final_Notes[]
The above rules are going to be a useful reference when you've began learning
Doxter, and by studying them you can get the full picture of its inner workings.
But the following guidelines and examples are a better starting point -- and
don't forget to look at source code of Doxter, for it's self-documenting by
its own system, and you can compare the source to the Asciidoc output and
study it as an example.
// end::The_Parser_Final_Notes[]

// tag::DocHeader[]

=== AsciiDoc Header

The very first line in your source code is special for Doxter.
The Header Parser will look if it starts with a `;=`. This marker is the
telltale sign for Doxter that the first lines contain an AsciiDoc Header.
Here's an example from the very source of Doxter:

[source,purebasic]
-------------------------------
include::Doxter.pb[lines=1..12]
-------------------------------

As you can easily guess by looking at the first 4 lines in the above code,
these represent a standard AsciiDoc Header, followed by custom attributes
(`:License: MIT License` and `:PureBASIC: 5.62`), a Skip line (ignored by Doxter)
used as horizontal ruler divider, and an Asciidoctor settings attribute
(`:toclevels: 3`).
Everything is as it would be in a normal AsciiDoc Header, except that the Header
lines are inside PureBasic comments. 
The remaining lines are just normal (non-Doxter) PB code and comments.

When Doxter encounters a `;=` on the very first line, it will then parse
all consecutive lines starging by `;|` (the ADoc comment marker) as part of
the Header, adding it to the stored Header data.
Lines starting with `~|` (the Skip comment marker) are simply ignored, and
they are not considered as the end of a Header.
As soon as line not starting by `;|` or `~|` is encountered, Doxter will
stop parsing the Header.

Separate handling of the Header is important for two reasons:

1. Documents which don't contain an AsciiDoc Header will not be treated as
   standalone documents (and saved with `.adoc` extension).
2. The Header lines must always be injected at the very beginning of the
   output file, before any of the tagged regions extracted from the source
   file (and regardless of their weights).

The latter point is important because it's in compliance with how AsciiDoc
looks for a Header in source files.

Whether or not Doxter found and Header in the source file, once it has dealt
with it it will carry on to the next parsing stage: scanning the source for
tagged regions. The Header and Regions parsers are two distinct parsers
that coexist in Doxter, and the latter takes on where the former left.

[NOTE]
========================
The Header parser doesn't consume those lines that didn't match its criteria,
and as soon as it encounters a non Header line it rolls back the parser
to the last file position, so that the regions parser can parse them instead.
========================
// end::DocHeader[]

// tag::Working_With_Regions[]

=== Working With Regions

The full syntax of a Tag Region Begin mark is:

--------------------------
;>tagname(<region weight>)
--------------------------

â€¦ where `tagname` is a unique identifier for the tagged region, and
`<region weight>` is an integer number. Both of them are optional, and if
you don't supply them Doxter will, using the default Tag ID `region` followed
by an incremental counter, and will assign as weight the value of the last
encountered weight plus one.
// end::Working_With_Regions[]

// tag::WIP[]
== To Be Continued...

[WARNING]
============
The documentation is not complete yet, as it lacks the part on practical examples.

The provided documentation should be enough to get started using Doxter; for
examples, study its source code in the mean time, and _use it_, _use it_, and
_use it again_, for it's easier to use than it might seem by reading its
documentation.
Also, by using it you can benefit from the
<<Parsing Live Preview During Execution,live parsing preview log>>, which is
an invaluable tool for learning.
============
// end::WIP[]

// tag::LICENSE[]
== License

=============================================================================
MIT License

Copyright (c) 2018 Tristano Ajmone +
https://github.com/tajmone/doxter

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
=============================================================================
// end::LICENSE[]

// tag::TODOs[]
== Roadmap

Doxter it's still a young application, and there is always room for improvements.
Here is a list of upcoming features, waiting to be implemented.

* *Sub-Regions Merging*.
   Same-named regions will be stitched together into a single region, making
   their inclusion in other documents easier.
   Sub-weights will be used for sorting before merging the region. 
// end::TODOs[]

// tag::CHANGELOG[]
== Changelog

* v0.1.2-alpha (2018/09/25) -- Aesthetic changes.
* v0.1.1-alpha (2018/09/25) -- Created Doxter repository on GitHub.
* v0.1.0-alpha (2018/09/21) -- First public released Alpha:
https://github.com/tajmone/PBCodeArcProto/blob/83c32cd/_assets/Doxter.pb
// end::CHANGELOG[]


